#!/bin/bash

require_non_sudo() {
  if [[ "$EUID" -eq 0 && ! " $* " =~ " --root " ]]; then
    echo "This script must be run without sudo unless --root is specified. Please try again..."
    exit 1
  fi
}

install_fzf() {

  if [[ "$(command -v fzf)" ]]; then
    echo "FZF already installed"
    return
  fi

  echo "Fetching the latest release information..."
  latest_release=$(curl -s https://api.github.com/repos/junegunn/fzf/releases/latest)

  download_url=$(echo "$latest_release" | grep -oP '"browser_download_url":\s*"\K.*?fzf-\d+\.\d+\.\d+-linux_amd64\.tar\.gz(?=")')

  if [[ -z "$download_url" ]]; then
    echo "Error: Unable to fetch the download URL."
    exit 1
  fi

  echo "Latest version download URL: $download_url"

  echo "Downloading the latest fzf release..."
  curl -LO "$download_url"

  echo "Extracting fzf..."
  tar -xzf "$(basename "$download_url")"

  chmod +x fzf
  echo "Moving fzf to /usr/local/bin..."
  sudo mv fzf /usr/local/bin/

  rm "$(basename "$download_url")"

  echo "FZF installed"
}

install_yazi() {
  if [[ "$(command -v yazi)" ]]; then
    echo "Yazi already installed"
    return
  fi

  # Install Yazi
  echo "Fetching the latest yazi archive..."
  curl -L -o yazi.zip https://github.com/sxyazi/yazi/releases/latest/download/yazi-x86_64-unknown-linux-gnu.zip
  echo "Extracting and moving yazi binaries..."
  unzip -q yazi.zip -d yazi-temp
  chmod +x yazi-temp/*/yazi
  sudo mv yazi-temp/*/yazi /usr/local/bin
  echo "Cleaning up..."
  rm -rf yazi-temp yazi.zip

  # Install dependencies
  install_fzf
  sudo apt install ffmpeg 7zip jq poppler-utils fd-find ripgrep zoxide imagemagick -y

  echo "Yazi installed"
}

install() {
  cd ~

  sudo apt install unzip curl git snap -y

  # Check for bootstrap.tmp and load choices if exists
  if [ -f bootstrap.tmp ]; then
    CHOICES=$(cat bootstrap.tmp)
    rm bootstrap.tmp
    echo "Continuing installation from previous session..."
  else
    # Define the whiptail menu
    CHOICES=$(whiptail --title "Software Installer" --checklist \
    "Select the software to install:" 20 60 6 \
    "zsh" "Install ZSH, FZF, and Starship" OFF \
    "stow" "Install GNU Stow" OFF \
    "yazi" "Install Yazi and dependencies" OFF \
    "nvm" "Install Node Version Manager (NVM)" OFF \
    "pnpm" "Install PNPM" OFF \
    "bun" "Install Bun" OFF 3>&1 1>&2 2>&3)

    # Check if the user pressed Cancel
    if [ $? -ne 0 ]; then
        echo "Installation canceled."
        exit 1
    fi
  fi

  # Installing "ZSH"
  if [[ $CHOICES == *"zsh"* ]]; then
    # FZF
    install_fzf
    # ZSH
    [[ "$(command -v zsh)" ]] || sudo apt install -y zsh && chsh -s $(which zsh) && echo "ZSH installed" || echo "ZSH already installed"
    # Starship
    [[ "$(command -v starship)" ]] || curl -sS https://starship.rs/install.sh | sh && echo "Starship installed" || echo "Starship already installed"

    echo "ZSH, FZF and Starship installed - Please restart your terminal and execute \`~/.config/yadm/bootstrap\` to complete the installation."
    
    # Store the current choices except stow and zsh
    echo "${CHOICES//\"zsh\"/}" > bootstrap.tmp
    exit 0
  fi

  # Installing "Stow"
  if [[ $CHOICES == *"stow"* ]]; then
    [[ "$(command -v stow)" ]] || sudo apt install -y stow && echo "Stow installed" || echo "Stow already installed"
  fi


  # Installing "YAZI"
  if [[ $CHOICES == *"yazi"* ]]; then
    install_yazi
  fi

  # Installing "NVM"
  if [[ $CHOICES == *"nvm"* ]]; then
    [[ "$(command -v nvm)" ]] || curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash && echo "Stow installed" || echo "Stow already installed"
  fi

  # Installing "PNPM"
  if [[ $CHOICES == *"pnpm"* ]]; then
    [[ "$(command -v pnpm)" ]] || curl -fsSL https://get.pnpm.io/install.sh | sh - && echo "PNPM installed" || echo "PNPM already installed"
  fi

  # Installing "Bun"
  if [[ $CHOICES == *"bun"* ]]; then
    [[ "$(command -v bun)" ]] || curl -fsSL https://bun.sh/install | bash && echo "Bun installed" || echo "Bun already installed"
  fi

  echo "Add these to your env file:"
  if [[ $CHOICES == *"bun"* ]]; then
    echo "export BUN_INSTALL=\"\$HOME/.bun\""
    echo "export PATH=\"\$BUN_INSTALL/bin:\$PATH\""
  fi

  if [[ $CHOICES == *"nvm"* ]]; then
    echo "export NVM_DIR=\"\$HOME/.config/nvm\""
    echo "[ -s \"\$NVM_DIR/nvm.sh\" ] && \. \"\$NVM_DIR/nvm.sh\""
  fi
}

require_non_sudo "$@"

install
